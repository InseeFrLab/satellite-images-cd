apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: geoserver-pod
spec:
  serviceName: geoserver-service
  replicas: 1
  selector:
    matchLabels:
      app: geoserver-pod
  template:
    metadata:
      labels:
        app: geoserver-pod
    spec:
      initContainers:
        - name: download-images-pod         
          image: minio/mc
          imagePullPolicy: Always 
          command:
            - /bin/sh
            - '-c'
            - |
              # Set up the environment variable for MinIO client
              export MC_HOST_s3=https://${AWS_ACCESS_KEY_ID}:${AWS_SECRET_ACCESS_KEY}:@${AWS_S3_ENDPOINT}
    
              # Copy data from S3 to the local volume
              mc cp -r s3/projet-slums-detection/data-clusters /dossierimage/ilots
          env:
            - name: AWS_S3_ENDPOINT
              value: minio.lab.sspcloud.fr
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: accessKey
                  name: my-s3-creds
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: secretKey
                  name: my-s3-creds

          volumeMounts:
            - name: geoserver-data-dir
              mountPath: /dossierimage

      containers:
        - name: geoserver
          image: kartoza/geoserver:2.23.1
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: geoserver-configmap
          env:
            - name: GEOSERVER_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: my-geoserver-creds
                  key: username
            - name: GEOSERVER_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-geoserver-creds
                  key: pwd
            - name: AWS_S3_ENDPOINT
              value: minio.lab.sspcloud.fr
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: accessKey
                  name: my-s3-creds
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: secretKey
                  name: my-s3-creds
          ports:
            - containerPort: 8080
              name: http-geoserver
              protocol: TCP

#          startupProbe:            
#            httpGet:
#              path: /geoserver
#              port: http-geoserver
#              scheme: HTTP
#            initialDelaySeconds: 30
#            periodSeconds: 360
#            failureThreshold: 30
#
#          livenessProbe:
#            httpGet:
#              path: /geoserver
#              port: http-geoserver
#              scheme: HTTP
#            periodSeconds: 360
#            failureThreshold: 30
#
#          readinessProbe:
#            httpGet:
#              path: /geoserver
#              port: http-geoserver
#              scheme: HTTP
#            periodSeconds: 360
#            failureThreshold: 30

          volumeMounts:
            - name: geoserver-data-dir
              mountPath: /opt/geoserver/data_dir
            - name: geowebcache-cache-dir
              mountPath: /opt/geoserver/data_dir/gwc
          resources:
            requests:
              memory: "16Gi"
              cpu: "3000m"
            limits:
              memory: "100Gi"
              cpu: "30000m"
      
      volumes:
        - name: geoserver-data-dir
          persistentVolumeClaim:
            claimName: geoserver-data-dir-pvc
        - name: geowebcache-cache-dir
          persistentVolumeClaim:
            claimName: geowebcache-cache-dir-pvc